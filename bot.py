import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from database.database import SessionLocal
from database.models.models import Movie, Genre, WatchedMovies
from config import TELEGRAM_TOKEN
import random
from datetime import datetime
#
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤. '
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/random - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º\n'
        '/genres - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤\n'
        '/watched - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã'
    )


async def random_movie(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º"""
    db = SessionLocal()
    try:
        movies = db.query(Movie).all()
        if not movies:
            await update.message.reply_text('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤')
            return

        movie = random.choice(movies)
        await send_movie_info(update, movie)
    finally:
        db.close()


async def genres(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤"""
    db = SessionLocal()
    try:
        genres = db.query(Genre).all()
        keyboard = []
        for genre in genres:
            keyboard.append([InlineKeyboardButton(genre.name, callback_data=f'genre_{genre.id}')])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:', reply_markup=reply_markup)
    finally:
        db.close()


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    if query.data.startswith('genre_'):
        genre_id = int(query.data.split('_')[1])
        db = SessionLocal()
        try:
            genre = db.query(Genre).filter(Genre.id == genre_id).first()
            if genre and genre.movies:
                movie = random.choice(genre.movies)
                await send_movie_info(update, movie, query=query)
            else:
                await query.edit_message_text('–§–∏–ª—å–º—ã –¥–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        finally:
            db.close()
    elif query.data.startswith('watch_'):
        await mark_watched(update, context)


async def send_movie_info(update: Update, movie: Movie, query=None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ"""
    genres_str = ', '.join([genre.name for genre in movie.genres])
    message = (
        f'üé¨ *{movie.title}*\n\n'
        f'üìù {movie.description}\n\n'
        f'üìÖ –ì–æ–¥: {movie.year}\n'
        f'‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {movie.rating}\n'
        f'üé≠ –ñ–∞–Ω—Ä—ã: {genres_str}\n'
        f'üé¶ [–¢—Ä–µ–π–ª–µ—Ä]({movie.trailer_url})'
    )

    keyboard = [[InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π", callback_data=f'watch_{movie.id}')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if query:
        await query.edit_message_text(text=message, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text=message, reply_markup=reply_markup, parse_mode='Markdown')


async def mark_watched(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ—á–∞–µ—Ç —Ñ–∏–ª—å–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π"""
    query = update.callback_query
    movie_id = int(query.data.split('_')[1])
    user_id = update.effective_user.id

    db = SessionLocal()
    try:
        watched = WatchedMovies(
            user_id=user_id,
            movie_id=movie_id,
            watched_date=datetime.utcnow()
        )
        db.add(watched)
        db.commit()
        await query.answer('–§–∏–ª—å–º –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π!')
    except Exception as e:
        logger.error(f"Error marking movie as watched: {e}")
        await query.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
    finally:
        db.close()


async def watched_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤"""
    user_id = update.effective_user.id
    db = SessionLocal()
    try:
        watched_movies = db.query(WatchedMovies).filter(WatchedMovies.user_id == user_id).all()
        if not watched_movies:
            await update.message.reply_text('–í—ã –µ—â–µ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞')
            return

        message = "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:\n\n"
        for watched in watched_movies:
            movie = watched.movie
            message += f"üé¨ {movie.title} ({movie.year})\n"

        await update.message.reply_text(message)
    finally:
        db.close()


async def shutdown(application: Application) -> None:
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    try:
        if application.is_initialized():
            await application.stop()
            await application.shutdown()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")
#
#
# # async def main() -> None:
# #     """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
# #     application = None
# #     try:
# #         application = Application.builder().token(TELEGRAM_TOKEN).build()
# #
# #         # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# #         application.add_handler(CommandHandler("start", start))
# #         application.add_handler(CommandHandler("random", random_movie))
# #         application.add_handler(CommandHandler("genres", genres))
# #         application.add_handler(CommandHandler("watched", watched_list))
# #         application.add_handler(CallbackQueryHandler(button))
# #
# #         # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
# #         await application.initialize()
# #         await application.start()
# #         await application.run_polling()
# #
# #     except Exception as e:
# #         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
# #     finally:
# #         if application:
# #             await shutdown(application)
# #
# #
# # if __name__ == '__main__':
# #     try:
# #         asyncio.run(main())
# #     except KeyboardInterrupt:
# #         logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
# #     except Exception as e:
# #         logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
#


import logging.handlers
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from database.database import SessionLocal
from database.models.models import Movie, Genre, WatchedMovies
from config import TELEGRAM_TOKEN
import random
from datetime import datetime


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)

    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ñ–∞–π–ª
    file_handler = logging.handlers.RotatingFileHandler(
        'bot.log',
        maxBytes=1024 * 1024,  # 1MB
        backupCount=5
    )
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)

    return logger


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logging()


# [–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π]

async def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("random", random_movie))
    app.add_handler(CommandHandler("genres", genres))
    app.add_handler(CommandHandler("watched", watched_list))
    app.add_handler(CallbackQueryHandler(button))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await app.initialize()
    await app.start()
    await app.run_polling(allowed_updates=Update.ALL_TYPES)
    await app.stop()


if __name__ == '__main__':
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        pending = asyncio.all_tasks()
        for task in pending:
            task.cancel()